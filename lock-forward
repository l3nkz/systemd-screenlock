#!/usr/bin/env python3

import gi.repository.GLib as glib

from dbus import SystemBus, Interface, SessionBus
from dbus.service import method, Object, BusName
from dbus.mainloop.glib import DBusGMainLoop

from os import environ
from sys import exit

from subprocess import Popen, DEVNULL
from shlex import split as split_arguments

from argparse import ArgumentParser, REMAINDER

from logging import getLogger, StreamHandler, DEBUG


logger = getLogger("locker")

class Forwarder:
    def __init__(self):
        self._lockers = []

    def listen(self, locker):
        self._lockers.append(locker)

    def forward(self):
        for locker in self._lockers:
            locker.lock()

class SignalForward(Forwarder):
    def __init__(self):
        Forwarder.__init__(self)

        # Get the current session ID
        try:
            self._session_id = environ["XDG_SESSION_ID"]
        except KeyError:
            raise RuntimeError("XDG_SESSION_ID not available in the environment!")

        # Create the DBus connection
        bus = SystemBus(mainloop=DBusGMainLoop(set_as_default=True))

        session_manager = Interface(
                bus.get_object("org.freedesktop.login1", "/org/freedesktop/login1"),
                dbus_interface="org.freedesktop.login1.Manager")

        session = Interface(
                bus.get_object("org.freedesktop.login1", 
                    session_manager.GetSession(self._session_id)),
                dbus_interface="org.freedesktop.login1.Session")

        # Connect to the 'Lock' signal of the current session
        session.connect_to_signal("Lock", self._callback)

        logger.debug("Connected to 'Lock' signal for session {}".format(self._session_id))

    def _callback(self):
        logger.debug("Received lock request via 'Lock' signal.")

        # Forward lock command to the actual locker program
        self.forward()


class MethodForwarder(Object, Forwarder):
    def __init__(self):
        Forwarder.__init__(self)

        bus = SessionBus(mainloop=DBusGMainLoop(set_as_default=True))
        bus_name = BusName("org.lockforward", bus=bus)

        Object.__init__(self, bus_name=bus_name, object_path="/")

        logger.debug("Created 'lock_now' method.")

    @method(dbus_interface="org.lockforward")
    def lock_now(self):
        logger.debug("Received lock request via 'lock_now' method.")

        # Forward the lock command to the actual locker program
        self.forward()


class Locker:
    def __init__(self, lock_program):
        self._lock_program = split_arguments(lock_program)
        self._lock_process = None

        logger.debug("Use {} to lock session.".format(" ".join(self._lock_program)))

    def lock(self):
        if self._lock_process is None or \
                self._lock_process.poll() is not None:
            logger.info("Lock the session.")

            # Start the locker program
            self._lock_process = Popen(self._lock_program, stdout=DEVNULL)
        else:
            logger.info("Session is still locked.")
            logger.debug("Lock process running (PID: {}).".format(self._lock_process.pid))


def run(arguments):
    lock_program = " ".join(arguments.locker) + " " + " ".join(arguments.arguments)
    debug = arguments.debug

    if debug:
        logger.setLevel(DEBUG)

    # Create all the needed objects
    locker = Locker(lock_program)
    signal = SignalForward()
    method = MethodForwarder()

    # Connect them together
    signal.listen(locker)
    method.listen(locker)

    # Enter the main loop
    mainloop = glib.MainLoop()

    try:
        logger.debug("Enter main loop.")
        mainloop.run()
    except KeyboardInterrupt:
        pass

if __name__ == "__main__":
    logger.addHandler(StreamHandler())

    commands = ArgumentParser(description="Session locking forwarder")

    commands.add_argument("--debug", "-d", action="store_true",
            dest="debug", help="Enable debug output")
    commands.add_argument("locker", type=str, action="store", nargs=1,
            help="The screen locker used to lock the session")
    commands.add_argument("arguments", type=str, action="store",
            nargs=REMAINDER, help="Additional arguments for the locker")

    parsed_args = commands.parse_args()

    run(parsed_args)
